name: CI/CD for Dockerized Flask app
on:
    push:
        branches: ['main']
    pull_request:
        branches: ['main']
jobs:
    dockerbuild:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - name: Build the Docker image.
              run: docker build . --file Dockerfile --tag workflow-test:$(date +%s)
    
    build-and-test:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout the code
              uses: actions/checkout@v4
            
            - name: Setup Python
              uses: actions/setup-python@v4
              with:
                python-version: '3.10'

            - name: Install all dependencies
              run: |
                python -m pip install --upgrade pip
                pip install flask
                pip install pytest
                pip install scikit-learn
                pip install pandas

            - name: Run tests
              run: |
                PYTHONPATH=. pytest

    build-and-publish:
        needs: build-and-test
        runs-on: ubuntu-latest

        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: setup docker buildx
              uses: docker/setup-buildx-action@v3
            
            - name: Login Dockerhub
              uses: docker/login-action@v3
              with:
                username: ${{  secrets.DOCKER_USERNAME  }}
                password: ${{  secrets.DOCKER_PASSWORD  }}

            - name: Build and Push Docker
              uses: docker/build-push-action@v4
              with:
                context: .
                push: true
                tags: ${{ secrets.DOCKER_USERNAME}}/churnprediction-app:latest

            - name: Deployment on EC2
              run: |
                  echo ${{secrets.AWS_SSH_KEY}} > ec2key.pem
                  chmod 400 ec2key.pem
                  ssh -o StrictHostKeyChecking=no -i ec2key.pem ${{ secrets.EC2_USER }}@${{ secrets.AWS_HOST }} "\
                  docker pull ${{ secrets.DOCKER_USERNAME }}/churnprediction-app:latest && \
                  docker stop churn-app || true && \
                  docker rm churn-app || true && \
                  docker run -d -p 5000:5000 --name churn-app ${{ secrets.DOCKER_USERNAME }}/churnprediction-app:latest"
            - name: Image Digest
              run: echo ${{ steps.build-and-publish.outputs.digest }}


